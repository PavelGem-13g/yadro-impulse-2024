`timescale 1ns / 1ps

module tb_Q_calculator;

    parameter WIDTH = 16;
    parameter CLK_PERIOD = 10;

    logic clk;
    logic rst;
    logic valid_in;
    logic signed [WIDTH-1:0] a, b, c, d;
    logic signed [WIDTH-1:0] Q;
    logic valid_out;

    // Instantiate DUT
    Q_calculator #(.WIDTH(WIDTH)) dut (
        .clk(clk),
        .rst(rst),
        .valid_in(valid_in),
        .a(a), .b(b), .c(c), .d(d),
        .Q(Q),
        .valid_out(valid_out)
    );

    // Clock generation
    always #(CLK_PERIOD/2) clk = ~clk;

    // Test vector type
    typedef struct {
        int a, b, c, d, expected_Q;
    } test_vector_t;

    // 20 тестов
    test_vector_t tests [20] = '{
        '{-74, -34,  20,  58, -1336},
        '{-72,  -6,  23,  96, -2502},
        '{ 78,  29,  16, -67,  1334},
        '{ 37,  27,   6, -35,   165},
        '{  6, -87,  15,  20,  2099},
        '{  3, -99, -85,  77, -9997},
        '{-46,  35, -28, -61,  -312},
        '{ 32,  89, -61, -14,  4287},
        '{-56, -48, -17, -50,   367},
        '{-79,  45, -36, -59, -2189},
        '{  5, -97,  79, -73, 11739},
        '{-22,  74, -23,  69, -2110},
        '{-78,  26,  90, -47, -6213},
        '{-63,  50, -20, -95,  -110},
        '{ 61,  32,  99,  59,  4220},
        '{-58, -89,  67, -96,  3146},
        '{-88,  64, -17,  87, -2496},
        '{-88, -87,  33, -73,   292},
        '{ 49, -34, -75, -58, -4201},
        '{-73, -88,  33, -91,   397}
    };

    int i;
    initial begin
        $display("Starting testbench...");
        clk = 0;
        rst = 1;
        valid_in = 0;
        a = 0;
	b = 0;
	c = 0;
	d = 0;

        #(2*CLK_PERIOD);
        rst = 0;

        for (i = 0; i < 20; i++) begin
            // Apply inputs
            a = tests[i].a;
            b = tests[i].b;
            c = tests[i].c;
            d = tests[i].d;
            valid_in = 1;

            @(posedge clk); // данные подаются на 1 такт
            valid_in = 0;

            // Подождать пока не появится valid_out
            wait (valid_out == 1);

            if (Q !== tests[i].expected_Q) begin
                $display("FAILED Test %0d: a=%0d b=%0d c=%0d d=%0d => Expected Q=%0d, Got Q=%0d",
                    i, tests[i].a, tests[i].b, tests[i].c, tests[i].d, tests[i].expected_Q, Q);
            end else begin
                $display("PASSED Test %0d: Q = %0d", i, Q);
            end

            @(posedge clk); // пауза перед следующим тестом
        end

        $display("All tests completed.");
        $finish;
    end

endmodule